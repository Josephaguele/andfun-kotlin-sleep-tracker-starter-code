/*
 * Copyright 2018, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.trackmysleepquality.database

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

// to make SleepNight a class that room can use to create a table, we need to annotate it with the
// @Entity annotation. We want to give our table a custom name that is different from the default of
// deriving it from the class name, we do this by adding parameters to the annotation and setting the
// table name parameter to daily_sleep_quality_table. Changing the table name is optional, but it is
// a good idea to identify your table with a name that includes "table".
@Entity(tableName = "daily_sleep_quality_table")
// We create a data class to define our sleep data entity
data class SleepNight(
    /*we add a var parameter variable for the id called nightId, this has to be a long because
     we are going to autogenerate the key and we have to initialize it so we make it zero*/
    // Having a primary key is mandatory and in this case we are using nightId so we annotate it
    // with PrimaryKey. Since we want the key generated by room, we set it to autoGenerate. Room
    // will generate a unique key for every instance of this class which parallels every row in
    // the table
    @PrimaryKey(autoGenerate = true)
    var nightId: Long = 0L,

    /*We annotate the columns with ColumnInfo*/
    /*we add a parameter variable for the start time in milliseconds, we initialize this to the
    * current system time in milli seconds since we create a new sleep night when the user presses
    * the start button to start recording*/
    @ColumnInfo(name = "start_time_milli")
    var startTimeMilli: Long = System.currentTimeMillis(),

    /*WE initialize this to be the same as the start time. This gives usa a handy way of telling
    * whether or not the stop button has been pressed to record an end time which is always going to
    * be different from the start time*/
    @ColumnInfo(name = "end_time_milli")
    var endTimeMilli: Long = startTimeMilli,

    // we set this to minus 1 indicating that no sleep quality has been recorded yet
    @ColumnInfo(name = "quality_rating")
    var sleepQualityRating : Int = -1

)

// @Query("SELECT * FROM daily_sleep_quality_table" + "ORDER BY nightId DESC")
// MEANING
// select all  entities in the sql table sorted by nightids in descending order.